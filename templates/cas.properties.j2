#
# Licensed to Apereo under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Apereo licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

server.name={{ cas_server_name }}
server.prefix=${server.name}

##
# Unique CAS node name
# host.name is used to generate unique Service Ticket IDs and SAMLArtifacts.  This is usually set to the specific
# hostname of the machine running the CAS node, but it could be any label so long as it is unique in the cluster.
host.name={{ cas_host_name }}

##
# CAS SSO Cookie Generation & Security
# See https://github.com/mitreid-connect/json-web-key-generator
#
# Do note that the following settings MUST be generated per deployment.
#
# The encryption secret key. By default, must be a octet string of size 256.
tgc.encryption.key={{ cas_tgc_encryption_key }}

# The signing secret key. By default, must be a octet string of size 512.
tgc.signing.key={{ cas_tgc_signing_key }}

# Decides whether SSO cookie should be created only under secure connections.
tgc.secure=true

# The expiration value of the SSO cookie
tgc.maxAge=-1

# The name of the SSO cookie
tgc.name=TGC

# The path to which the SSO cookie will be scoped
tgc.path=/

# The expiration value of the SSO cookie for long-term authentications
# tgc.remember.me.maxAge=1209600

# Decides whether SSO Warning cookie should be created only under secure connections.
warn.cookie.secure=true

# The expiration value of the SSO Warning cookie
warn.cookie.maxAge=-1

# The name of the SSO Warning cookie
warn.cookie.name=CASPRIVACY

# The path to which the SSO Warning cookie will be scoped
warn.cookie.path=/

# Whether we should track the most recent session by keeping the latest service ticket
tgt.onlyTrackMostRecentSession = true

##
# CAS UI Theme Resolution
#
# cas.themeResolver.defaultThemeName=cas-theme-default
# cas.themeResolver.pathprefix=/WEB-INF/view/jsp/
# cas.themeResolver.param.name=theme
# Location of the Spring xml config file where views may be collected
# cas.viewResolver.xmlFile=/META-INF/spring/views.xml

##
# CAS Logout Behavior
# WEB-INF/cas-servlet.xml
#
# Specify whether CAS should redirect to the specified service parameter on /logout requests
cas.logout.followServiceRedirects={{ cas_logout_followServiceRedirects }}

##
# File Authentication

{% if ((cas_fileauth_users is defined) and (cas_fileauth_users is not none)) %}
file.authn.filename=file:///etc/cas/people.txt
file.authn.separator=::
{% endif %}

##
# General Authentication
#
# cas.principal.transform.upperCase=false
# cas.authn.password.encoding.char=UTF-8
# cas.authn.password.encoding.alg=SHA-256
# cas.principal.transform.prefix=
# cas.principal.transform.suffix=

##
# Accepted Users Authentication
#
# Purposefully set blank for security reasons.
cas.authn.accept.users=

##
# Single Sign-On Session TGT Timeouts
#
# Inactivity Timeout Policy
tgt.timeout.maxTimeToLiveInSeconds={{ cas_tgt_ttl }}

# Hard Timeout Policy
tgt.timeout.hard.maxTimeToLiveInSeconds={{ cas_tgt_hard_max }}
#
# Throttled Timeout Policy
tgt.throttled.maxTimeToLiveInSeconds={{ cas_tgt_ttl }}
tgt.throttled.timeInBetweenUsesInSeconds=5

# Default Expiration Policy
tgt.maxTimeToLiveInSeconds={{ cas_tgt_ttl }}
tgt.timeToKillInSeconds={{ cas_tgt_ttk }}

##
# Authentication delegation using pac4j
#
{% if ((cas_pac4j_saml is defined) and (cas_pac4j_saml is not none)) %}
cas.pac4j.client.authn.typedidused={{ cas_pac4j_client_authn_typedidused }}
{% endif %}
# cas.pac4j.facebook.id=
# cas.pac4j.facebook.secret=
# cas.pac4j.facebook.scope=
# cas.pac4j.facebook.fields=
# cas.pac4j.twitter.id=
# cas.pac4j.twitter.secret=
{% if ((cas_pac4j_saml is defined) and (cas_pac4j_saml is not none)) %}
cas.pac4j.saml.keystorePassword={{ cas_pac4j_saml.storepass }}
cas.pac4j.saml.privateKeyPassword={{ cas_pac4j_saml.keypass }}
cas.pac4j.saml.keystorePath=/etc/cas/samlKeystore.jks
cas.pac4j.saml.identityProviderMetadataPath=/etc/cas/samlIdP.xml
# cas.pac4j.saml.maximumAuthenticationLifetime=
cas.pac4j.saml.serviceProviderEntityId={{ cas_pac4j_saml.entityId }}
cas.pac4j.saml.serviceProviderMetadataPath=/etc/cas/samlSP.xml
{% endif %}
# cas.pac4j.cas.loginUrl=
# cas.pac4j.cas.protocol=
# cas.pac4j.oidc.id=
# cas.pac4j.oidc.secret=
# cas.pac4j.oidc.discoveryUri=
# cas.pac4j.oidc.useNonce=
# cas.pac4j.oidc.preferredJwsAlgorithm=
# cas.pac4j.oidc.maxClockSkew=
# cas.pac4j.oidc.customParamKey1=
# cas.pac4j.oidc.customParamValue1=
# cas.pac4j.oidc.customParamKey2=
# cas.pac4j.oidc.customParamValue2=
{% if ((cas_ldap is defined) and (cas_ldap is not none)) %}
{% for ldap in cas_ldap %}

##
# LDAP Authentication
# https://apereo.github.io/cas/5.0.x/installation/Configuration-Properties.html#ldap
#

# URI for this LDAP endpoint
cas.authn.ldap[{{ loop.index0 }}].ldapUrl={{ ldap.url }}

# Type of system:
# # AD|AUTHENTICATED|DIRECT|ANONYMOUS|SASL
cas.authn.ldap[{{ loop.index0 }}].type={{ ldap.type }}

# Start TLS for SSL connections
cas.authn.ldap[{{ loop.index0 }}].useSsl={{ ldap.useSsl }}
cas.authn.ldap[{{ loop.index0 }}].useStartTLS={{ ldap.useStartTLS }}

# LDAP connection timeout in milliseconds
cas.authn.ldap[{{ loop.index0 }}].connectTimeout={{ ldap.connectTimeout }}

# Setting to true allows cas to start without this ldap provider
cas.authn.ldap[{{ loop.index0 }}].failFast={{ ldap.failFast }}

# Base DN of users to be authenticated
cas.authn.ldap[{{ loop.index0 }}].baseDn={{ ldap.baseDn }}

# DN format for users to be authenticated
cas.authn.ldap[{{ loop.index0 }}].dnFormat={{ ldap.dnFormat }}

# The filter is used to search for the user account
# https://access.redhat.com/documentation/en-US/Red_Hat_Directory_Server/8.2/html/Administration_Guide/Finding_Directory_Entries-LDAP_Search_Filters.html
cas.authn.ldap[{{ loop.index0 }}].userFilter={{ ldap.userFilter }}

# Recursively search the Base DN?
cas.authn.ldap[{{ loop.index0 }}].subtreeSearch={{ ldap.subtreeSearch }}

# The attribute that represents the username
cas.authn.ldap[{{ loop.index0 }}].principalAttributeId={{ ldap.principalAttributeId }}

# The attribute that represents the password
cas.authn.ldap[{{ loop.index0 }}].principalAttributePassword={{ ldap.principalAttributePassword }}

# A list of principal attributes
cas.authn.ldap[{{ loop.index0 }}].principalAttributeList={{ ldap.principalAttributeList }}

# Modifies principal attributes returned by CAS
# NONE|UPPERCASE|LOWERCASE
cas.authn.ldap[{{ loop.index0 }}].principalTransformation.caseConversion={{ ldap.principalTransformation_caseConversion }}

# Allows multiple values per attribute
cas.authn.ldap[{{ loop.index0 }}].allowMultiplePrincipalAttributeValues={{ ldap.allowMultiplePrincipalAttributeValues }}

# The junk drawer of user attributes
cas.authn.ldap[{{ loop.index0 }}].additionalAttributes={{ ldap.additionalAttributes }}

# Bind account DN
cas.authn.ldap[{{ loop.index0 }}].bindDn={{ ldap.bindDn }}

# Bind account password
cas.authn.ldap[{{ loop.index0 }}].bindCredential={{ ldap.bindCredential }}

# LDAP connection pool configuration
cas.authn.ldap[{{ loop.index0 }}].pool.minSize={{ ldap.pool_minSize }}
cas.authn.ldap[{{ loop.index0 }}].pool.maxSize={{ ldap.pool_maxSize }}
cas.authn.ldap[{{ loop.index0 }}].pool.validateOnCheckout={{ ldap.pool_validateOnCheckout }}
cas.authn.ldap[{{ loop.index0 }}].pool.validatePeriodically={{ ldap.pool_validatePeriodically }}
cas.authn.ldap[{{ loop.index0 }}].pool.validatePeriod={{ ldap.pool_validatePeriod }}

{% endfor %}
{% endif %}
